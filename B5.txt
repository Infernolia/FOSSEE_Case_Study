#include "mainwindow.h"
#include "ui_mainwindow.h"
#include<cmath>
#include<QMouseEvent>
 static QImage image(500,500,QImage::Format_RGB888);
 QRgb col=qRgb(255,255,255);
 bool start;
 int ver=0;
 int a1[20],b1[20],a[20],b[20],r[20],l[20];
 enum dir{UP,DOWN,LEFT,RIGHT};
 int hx1=100,hy1=100,hx2=0,hy2=0,h=20;
 QRgb value=qRgb(0,255,0);
MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    DDA(100,100,100,200,value);
        DDA(100,100,200,100,value);
        DDA(100,200,200,200,value);
        DDA(200,100,200,200,value);
        ui->label->setPixmap(QPixmap::fromImage(image));
      ui->label->show();
    start=true;
}

MainWindow::~MainWindow()
{
    delete ui;
}

int MainWindow::sign(float a)
{
    if(a<0)
        return -1;
    else
        if(a>0)
            return 1;
    else
            return 0;
}

void MainWindow::DDA(float x1,float y1,float x2,float y2,float val)
{
    int i=1;
    float length,dx,dy,x,y;

    if(abs(x2-x1)>abs(y2-y1))
        length=abs(x2-x1);
    else
        length=abs(y2-y1);
    dx=(x2-x1)/length;
    dy=(y2-y1)/length;
    x=x1+0.5f;
    y=y1+0.5f;
        while(i<=length)
        {
            image.setPixel(static_cast<int>(x),static_cast<int>(y),val);
            x=x+dx;
            y=y+dy;
            i++;
        }
    ui->label->setPixmap(QPixmap::fromImage(image));
    ui->label->show();

}

void MainWindow::DDA1(float x1,float y1,float x2,float y2,float val)
{
    int i=1;
    float length,dx,dy,x,y;

    if(abs(x2-x1)>abs(y2-y1))
        length=abs(x2-x1);
    else
        length=abs(y2-y1);
    dx=(x2-x1)/length;
    dy=(y2-y1)/length;
    x=x1+0.5f;
    y=y1+0.5f;
        while(i<=length)
        {
            if(x<=200 && x>=100 && y<=200 && y>=100)
            {
                image.setPixel(static_cast<int>(x),static_cast<int>(y),val);
            }

            x=x+dx;
            y=y+dy;
            i++;
        }
    ui->label->setPixmap(QPixmap::fromImage(image));
    ui->label->show();

}

void MainWindow::on_pushButton_clicked()
{
    float sx1=ui->lineEdit->text().toFloat();
    float sy1=ui->lineEdit_2->text().toFloat();
    float sx2=ui->lineEdit_3->text().toFloat();
    float sy2=ui->lineEdit_4->text().toFloat();
    DDA(sx1,sy1,sx2,sy2,col);
}


void MainWindow:: mousePressEvent(QMouseEvent *ev)
{
    if(start==true)
    {
        int p= ev->pos().x();
        int q= ev->pos().y();
        a1[ver]=p;
        b1[ver]=q;
        if(ev->button()==Qt::RightButton)
        {
            a1[ver]=a1[0];
            b1[ver]=b1[0];
            start=false;
            DDA(a1[0],b1[0],a1[ver-1],b1[ver-1],value);
        }else
            if(ver>0)
        {
            DDA(a1[ver],b1[ver],a1[ver-1],b1[ver-1],value);
        }
    }
    ver++;
}

void MainWindow::move(int dir)
{
    switch(dir)
    {
    case UP:
        hx2=hx1;
        hy2=hy1-h;
        DDA(hx1,hy1,hx2,hy2,value);
        hx1=hx2;
        hy1=hy2;
        break;
   case DOWN:
        hx2=hx1;
        hy2=hy1+h;
        DDA(hx1,hy1,hx2,hy2,value);
        hx1=hx2;
        hy1=hy2;
        break;
   case LEFT:
        hx2=hx1-h;
        hy2=hy1;
        DDA(hx1,hy1,hx2,hy2,value);
        hx1=hx2;
        hy1=hy2;
        break;
   case RIGHT:
        hx2=hx1+h;
        hy2=hy1;
        DDA(hx1,hy1,hx2,hy2,value);
        hx1=hx2;
        hy1=hy2;
        break;
    default:
        break;
    }
}

void MainWindow::hilbert(int level,int dir)
{
    if(level==1)
    {
        switch(dir)
        {
        case UP:
            move(DOWN);
            move(RIGHT);
            move(UP);
            break;
        case DOWN:
            move(UP);
            move(LEFT);
            move(DOWN);
            break;
        case LEFT:
            move(RIGHT);
            move(DOWN);
            move(LEFT);
            break;
       case RIGHT:
            move(LEFT);
            move(UP);
            move(RIGHT);
            break;
        default:
            break;
        }
    }else
    {
        switch(dir)
        {
        case LEFT:
            hilbert(level-1,UP);
            move(RIGHT);
            hilbert(level-1,LEFT);
            move(DOWN);
            hilbert(level-1,LEFT);
            move(LEFT);
            hilbert(level-1,DOWN);
            break;
        case RIGHT:
            hilbert(level-1,DOWN);
            move(LEFT);
            hilbert(level-1,RIGHT);
            move(UP);
            hilbert(level-1,RIGHT);
            move(RIGHT);
            hilbert(level-1,UP);
            break;
          case UP:
            hilbert(level-1,LEFT);
            move(DOWN);
            hilbert(level-1,UP);
            move(RIGHT);
            hilbert(level-1,UP);
            move(UP);
            hilbert(level-1,RIGHT);
            break;
          case DOWN:
            hilbert(level-1,RIGHT);
            move(UP);
            hilbert(level-1,DOWN);
            move(LEFT);
            hilbert(level-1,DOWN);
            move(DOWN);
            hilbert(level-1,LEFT);
            break;
        }
    }
}

void MainWindow::on_pushButton_3_clicked()
{
    hilbert(4,UP);
}

void MainWindow::outcode()
{
    for(int i=0;i<10;i++)
    {
        a[i]=0;
        b[i]=0;
        r[i]=0;
        l[i]=0;
    }
    for(int i=0;i<ver-1;i++)
    {
        if(a1[i]<100)
        {l[i]=1;}
        if(a1[i]>200)
        {r[i]=1;}
        if(b1[i]<100)
        {a[i]=1;}
        if(b1[i]>200)
        {b[i]=1;}
    }
    value=qRgb(0,0,255);
    for(int i=0;i<ver-1;i++)
    {
        if((a[i]&a[i+1])==0 && (b[i]&b[i+1])==0 && (r[i]&r[i+1])==0 && (l[i]&l[i+1])==0 )
        {
            value=qRgb(0,0,0);
            DDA(a1[i],b1[i],a1[i+1],b1[i+1],value);
            value=qRgb(0,255,0);
            DDA1(a1[i],b1[i],a1[i+1],b1[i+1],value);
        }
        else
        {
            value=qRgb(0,0,0);
            DDA(a1[i],b1[i],a1[i+1],b1[i+1],value);
        }
    }
}



void MainWindow::on_pushButton_4_clicked()
{
    outcode();
}
